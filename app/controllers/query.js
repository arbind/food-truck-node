// Generated by CoffeeScript 1.6.1
var adapt, findLocalCrafts, params, renderHTMLSearchResults, renderJSONSearchResults, renderSearchResults;

params = function(request) {
  return _.extend(_.extend({}, request.query), request.params);
};

adapt = function(craftResults) {
  var adaptedCrafts, craft;
  if (!craftResults) {
    return craftResults.crafts = [];
  }
  adaptedCrafts = (function() {
    var _i, _len, _ref, _results;
    _ref = craftResults.crafts;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      craft = _ref[_i];
      _results.push(new CraftAdapter(craft));
    }
    return _results;
  })();
  return craftResults.crafts = adaptedCrafts;
};

findLocalCrafts = function(context, callback) {
  var craftQuery;
  craftQuery = new CraftQuery(context);
  return craftQuery.findLocalCrafts(function(err, craftResults) {
    if (err != null) {
      return callback(err, []);
    }
    return callback(null, adapt(craftResults));
  });
};

renderSearchResults = function(format, request, response, userQuery) {
  var context, device, user;
  user = request.user;
  device = request.device;
  context = {
    user: user,
    device: device,
    userQuery: userQuery
  };
  return findLocalCrafts(context, function(err, craftResults) {
    var clientData;
    if (err != null) {
      console.log("!! ERROR: " + err);
      if (craftResults == null) {
        craftResults = {
          crafts: []
        };
      }
    }
    clientData = {
      user: user,
      craftResults: craftResults
    };
    if ('json' === format) {
      return response.render(clientData.toJSON());
    } else {
      response.expose(clientData, 'ui.data');
      return response.render('query/index', clientData);
    }
  });
};

renderHTMLSearchResults = function(request, response, userQuery) {
  return renderSearchResults('html', request, response, userQuery);
};

renderJSONSearchResults = function(request, response, userQuery) {
  return renderSearchResults('json', request, response, userQuery);
};

exports.index = function(request, response) {
  var userQuery;
  userQuery = params(request);
  userQuery = _.omit(userQuery, ['page', 'limit']);
  return renderHTMLSearchResults(request, response, userQuery);
};

exports.scroll = function(request, response) {
  var userQuery;
  userQuery = params(requests);
  return renderJSONSearchResults(request, response, userQuery);
};
